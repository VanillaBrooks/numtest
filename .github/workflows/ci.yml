name: CI

on:
  push:
    branches: [ "main" ]  # Run when pushing to main.
  pull_request:
    branches: [ "main" ]  # Run on pull requests to main.
    types:
      - opened  # Default trigger that we need to manually reset.
      - reopened  # Default trigger that we need to manually reset.
      - synchronize # Default trigger that we need to manuall reset.
      - ready_for_review  # Trigger CI when pull request is marked as ready.

env:
  CARGO_TERM_COLOR: always  # Color cargo commands and output.
  RUSTFLAGS: "-Dwarnings"   # Make CI fail on Clippy lint warnings.

jobs:
        
  test:
    name: Test
    # Only run if the pull request is marked as ready.
    if: ${{ !github.event.pull_request.draft }}
    strategy:
      matrix:
        os: # Run tests on all three operating systems.
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout  # Checkout this repo's code.
        uses: actions/checkout@v4
      - name: Install # Install stable toolchain.
        run: rustup update stable && rustup default stable
      - name: Test  # Use dependencies from committed lock file.
        run: set RUST_BACKTRACE=1; cargo test --locked --all-features --verbose

  check-publishing:
    name: Check publishing
    runs-on: ubuntu-latest
    needs: test # Only run if all tests have passed.
    steps:
    - name: Checkout  # Checkout this repo's code.
      uses: actions/checkout@v4
    - name: Lint  # Linting using Clippy.
      run: cargo clippy --no-deps --all-features
    - name: Docs  # Ensure that docs can be generated for this crate.
      run: cargo doc --no-deps
    - name: Publishing dry run # Ensure that this crate can be published.
      run: |
        # Run cargo publish --dry-run and capture output.
        DRY_RUN_OUTPUT=$(cargo publish --dry-run 2>&1)

        # Print out full dry run output.
        echo "$DRY_RUN_OUTPUT"

        # Filter out the final warning printed for all dry runs.
        FILTERED_OUTPUT=$(echo "$DRY_RUN_OUTPUT" | grep -v "aborting upload due to dry run" || true)

        # Check if filtered output contains any other warnings and raise an error if it does.
        if echo "$FILTERED_OUTPUT" | grep -q "warning"; then
          echo "Warning(s) (in addition to 'aborting upload due to dry run') found in cargo "\
            "publish --dry-run output"
          exit 1  # Exit with non-zero status to fail the job
        fi